"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeId = exports.BitConfig = void 0;
const tslib_1 = require("tslib");
const bigint_buffer_1 = require("../bigint_buffer");
(0, tslib_1.__exportStar)(require("./aux_data_selector"), exports);
(0, tslib_1.__exportStar)(require("./bridge_config"), exports);
(0, tslib_1.__exportStar)(require("./bridge_status"), exports);
const randomBool = () => !!Math.round(Math.random());
const randomInt = (to = 2 ** 26 - 1) => Math.floor(Math.random() * (to + 1));
const getNumber = (val, offset, size) => Number((val >> BigInt(offset)) & ((BigInt(1) << BigInt(size)) - BigInt(1)));
class BitConfig {
    constructor(firstInputVirtual, secondInputVirtual, firstOutputVirtual, secondOutputVirtual, secondInputReal, secondOutputReal) {
        this.firstInputVirtual = firstInputVirtual;
        this.secondInputVirtual = secondInputVirtual;
        this.firstOutputVirtual = firstOutputVirtual;
        this.secondOutputVirtual = secondOutputVirtual;
        this.secondInputReal = secondInputReal;
        this.secondOutputReal = secondOutputReal;
    }
    static random() {
        return new BitConfig(randomBool(), randomBool(), randomBool(), randomBool(), randomBool(), randomBool());
    }
    static fromBigInt(val) {
        return new BitConfig(getNumber(val, 0, 1) == 0 ? false : true, getNumber(val, 1, 1) == 0 ? false : true, getNumber(val, 2, 1) == 0 ? false : true, getNumber(val, 3, 1) == 0 ? false : true, getNumber(val, 4, 1) == 0 ? false : true, getNumber(val, 5, 1) == 0 ? false : true);
    }
    toBigInt() {
        return (BigInt(this.firstInputVirtual) +
            (BigInt(this.secondInputVirtual) << BigInt(1)) +
            (BigInt(this.firstOutputVirtual) << BigInt(2)) +
            (BigInt(this.secondOutputVirtual) << BigInt(3)) +
            (BigInt(this.secondInputReal) << BigInt(4)) +
            (BigInt(this.secondOutputReal) << BigInt(5)));
    }
}
exports.BitConfig = BitConfig;
BitConfig.EMPTY = new BitConfig(false, false, false, false, false, false);
class BridgeId {
    constructor(addressId, inputAssetIdA, outputAssetIdA, outputAssetIdB, inputAssetIdB, bitConfig, auxData) {
        this.addressId = addressId;
        this.inputAssetIdA = inputAssetIdA;
        this.outputAssetIdA = outputAssetIdA;
        this.outputAssetIdB = outputAssetIdB;
        this.inputAssetIdB = inputAssetIdB;
        this.bitConfig = bitConfig;
        this.auxData = auxData;
    }
    static random() {
        return new BridgeId(randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), BitConfig.random(), randomInt());
    }
    static fromBigInt(val) {
        return new BridgeId(getNumber(val, this.ADDRESS_OFFSET, this.ADDRESS_BIT_LEN), getNumber(val, this.INPUT_ASSET_ID_A_OFFSET, this.INPUT_ASSET_ID_A_LEN), getNumber(val, this.OUTPUT_A_ASSET_ID_OFFSET, this.OUTPUT_A_ASSET_ID_LEN), getNumber(val, this.OUTPUT_B_ASSET_ID_OFFSET, this.OUTPUT_B_ASSET_ID_LEN), getNumber(val, this.INPUT_ASSET_ID_B_OFFSET, this.INPUT_ASSET_ID_B_LEN), BitConfig.fromBigInt(BigInt(getNumber(val, this.BITCONFIG_OFFSET, 32))), getNumber(val, this.AUX_DATA_OFFSET, this.AUX_DATA_LEN));
    }
    static fromBuffer(buf) {
        if (buf.length !== 32) {
            throw new Error('Invalid buffer.');
        }
        return BridgeId.fromBigInt((0, bigint_buffer_1.toBigIntBE)(buf));
    }
    static fromString(str) {
        return BridgeId.fromBuffer(Buffer.from(str.replace(/^0x/i, ''), 'hex'));
    }
    toBigInt() {
        return (BigInt(this.addressId) +
            (BigInt(this.inputAssetIdA) << BigInt(BridgeId.INPUT_ASSET_ID_A_OFFSET)) +
            (BigInt(this.outputAssetIdA) << BigInt(BridgeId.OUTPUT_A_ASSET_ID_OFFSET)) +
            (BigInt(this.outputAssetIdB) << BigInt(BridgeId.OUTPUT_B_ASSET_ID_OFFSET)) +
            (BigInt(this.inputAssetIdB) << BigInt(BridgeId.INPUT_ASSET_ID_B_OFFSET)) +
            (this.bitConfig.toBigInt() << BigInt(BridgeId.BITCONFIG_OFFSET)) +
            (BigInt(this.auxData) << BigInt(BridgeId.AUX_DATA_OFFSET)));
    }
    toBuffer() {
        return (0, bigint_buffer_1.toBufferBE)(this.toBigInt(), 32);
    }
    toString() {
        return `0x${this.toBuffer().toString('hex')}`;
    }
    equals(id) {
        return id.toBuffer().equals(this.toBuffer());
    }
}
exports.BridgeId = BridgeId;
BridgeId.ZERO = new BridgeId(0, 0, 0, 0, 0, BitConfig.EMPTY, 0);
BridgeId.ENCODED_LENGTH_IN_BYTES = 32;
BridgeId.ADDRESS_BIT_LEN = 32;
BridgeId.INPUT_ASSET_ID_A_LEN = 30;
BridgeId.OUTPUT_A_ASSET_ID_LEN = 30;
BridgeId.OUTPUT_B_ASSET_ID_LEN = 30;
BridgeId.BITCONFIG_LEN = 32;
BridgeId.INPUT_ASSET_ID_B_LEN = 30;
BridgeId.AUX_DATA_LEN = 64;
BridgeId.ADDRESS_OFFSET = 0;
BridgeId.INPUT_ASSET_ID_A_OFFSET = BridgeId.ADDRESS_BIT_LEN;
BridgeId.OUTPUT_A_ASSET_ID_OFFSET = BridgeId.INPUT_ASSET_ID_A_OFFSET + BridgeId.INPUT_ASSET_ID_A_LEN;
BridgeId.OUTPUT_B_ASSET_ID_OFFSET = BridgeId.OUTPUT_A_ASSET_ID_OFFSET + BridgeId.OUTPUT_A_ASSET_ID_LEN;
BridgeId.INPUT_ASSET_ID_B_OFFSET = BridgeId.OUTPUT_B_ASSET_ID_OFFSET + BridgeId.OUTPUT_B_ASSET_ID_LEN;
BridgeId.BITCONFIG_OFFSET = BridgeId.INPUT_ASSET_ID_B_OFFSET + BridgeId.INPUT_ASSET_ID_B_LEN;
BridgeId.AUX_DATA_OFFSET = BridgeId.BITCONFIG_OFFSET + BridgeId.BITCONFIG_LEN;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnJpZGdlX2lkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxvREFBMEQ7QUFFMUQsbUVBQW9DO0FBQ3BDLCtEQUFnQztBQUNoQywrREFBZ0M7QUFFaEMsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFFckQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFN0UsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFXLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxFQUFFLENBQzlELE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFOUUsTUFBYSxTQUFTO0lBR3BCLFlBQ2tCLGlCQUEwQixFQUMxQixrQkFBMkIsRUFDM0Isa0JBQTJCLEVBQzNCLG1CQUE0QixFQUM1QixlQUF3QixFQUN4QixnQkFBeUI7UUFMekIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFTO1FBQzFCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBUztRQUMzQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVM7UUFDM0Isd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFTO1FBQzVCLG9CQUFlLEdBQWYsZUFBZSxDQUFTO1FBQ3hCLHFC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